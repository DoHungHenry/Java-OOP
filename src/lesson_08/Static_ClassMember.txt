1. Class member
// Khi khai báo 1 thứ gì trong class có từ khóa static thì nó sẽ là class member
// Lưu ý
       // Class member mang ngữ cảnh dùng cho cho tất cả các object được sinh ra từ class này
       // Class member được sinh ra trước khi object được sinh ra (object từ class này), điều này dẫn đến ngữ cảnh SHARED
       // Class member không được phép gọi đến bất kì thứ gì Non-Static
       // Nhưng Non-Static có thể gọi bất kì thứ gì Static

2. Class Variable
//Nếu 1 khai báo biến có Static, nó sẽ được gọi là class variable
//SHARED:  Bất kì thay đổi nào của biến này phát sinh từ một trong những object
  (cái mà được sinh ra từ class này) sẽ dẫn đến việc tất cả tất cả các
  object khác bị thay đổi theo

public class RobotDog {
    //SHARED
    public static int dogId = 0;

    public void increaseDogId(){
        dogId++;
    }
    public static int getDogId() {
        return dogId;
    }
}
public class TestRobotDog {
    public static void main(String[] args) {
        RobotDog bi = new RobotDog();
        bi.increaseDogId();

        //equal 1
        System.out.println(bi.getDogId());

        RobotDog ben = new RobotDog();
        ben.increaseDogId();

        //equal 2: SHARED : RobotBi bị ảnh hưởng bỏi việc tăng giá trị từ ben
        System.out.println(bi.getDogId());
        //equal 2
        System.out.println(ben.getDogId());
    }
}

3. Class method
public class RobotDog {
    public static int dogId = 0;
    public String dogName = "Banh Mi";

    // Non-Static method can refer to a class member(
    public int getDogId() {
        return dogId;
    }

    // Can not refer
    public static void doSt(){
        return dogName;
    }
}

4. Constructor của class sẽ ko có Static

5. Thường các utility method sẽ để static để có thể truy cập nhanh mà không cần khởi tạo class

public class UtilityMethod {
    public static int findMinNum(int[] arr){
        return 0;
    }

    public int findMaxNum(int[] ints){
        return 0;
    }

    public static void main(String[] args) {
        // we can call class method to re-use logic directly without initiate new object
        UtilityMethod.findMinNum(new int[]{});

        // we can't call method to re-use logic directly without initiate new object
        // UtilityMethod.findMaxNum(new int[]{});
        // Need to initiate new object from class because findMaxNum() isn't static
        new UtilityMethod().findMaxNum(new int[]{});
    }
}

6. Class member có thể bị override hay không?
// Có: Class variable có thể override
// Không: Class method không thể bị override

//Parent class
public class ConGau {
    //có thể override
    public static String name = "gau";
    //Không thể override
    public static int tuoiGau(int age){
        return age;
    }
}
//Child class
public class ConGauCon extends ConGau {
    //Static block: override static name của parent class
    static {
        name = "gau con";
    }
    public static void main(String[] args) {
        ConGau conGauCon = new ConGauCon();
        System.out.println(conGauCon.name);
    }
}

// Lưu ý: nếu khai báo hai class method giống hệt nhau ở lớp cha và lớp con,
thì có xảy ra override không, hoặc có xảy ra xung đột ko?
=> không, vì hai class method này là của 2 class hoàn toàn khác nhau
và ko liên quan đến nhau, nó trực thuộc 2 class
